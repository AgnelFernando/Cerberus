"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class ultrasonic_data(object):

    __slots__ = ["stamp", "range"]

    __typenames__ = ["double", "double"]

    __dimensions__ = [None, [4]]

    def __init__(self):
        self.stamp = 0.0
        """ LCM Type: double """
        self.range = [ 0.0 for dim0 in range(4) ]
        """ LCM Type: double[4] """

    def encode(self):
        buf = BytesIO()
        buf.write(ultrasonic_data._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">d", self.stamp))
        buf.write(struct.pack('>4d', *self.range[:4]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ultrasonic_data._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ultrasonic_data._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = ultrasonic_data()
        self.stamp = struct.unpack(">d", buf.read(8))[0]
        self.range = struct.unpack('>4d', buf.read(32))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if ultrasonic_data in parents: return 0
        tmphash = (0x94a476079157289) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if ultrasonic_data._packed_fingerprint is None:
            ultrasonic_data._packed_fingerprint = struct.pack(">Q", ultrasonic_data._get_hash_recursive([]))
        return ultrasonic_data._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", ultrasonic_data._get_packed_fingerprint())[0]

